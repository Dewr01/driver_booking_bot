from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import db
from config import ADMIN_ID

admin_router = Router()


class AdminStates(StatesGroup):
    WAITING_BOOKING_ID = State()
    WAITING_NEW_INVITE = State()


def _admin_only(user_id: int) -> bool:
    return ADMIN_ID is not None and user_id == ADMIN_ID


@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not _admin_only(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "/bookings - –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "/drivers - –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
        "/cancel_booking - –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å\n"
        "/add_invite - –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥\n"
        "/cleanup - –£–¥–∞–ª–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ"
    )


@admin_router.message(Command("bookings"))
async def show_bookings(message: types.Message):
    if not _admin_only(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    bookings = db.get_all_bookings()
    if not bookings:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for b in bookings:
        driver = db.get_driver(b.driver_id)
        user = b.user  # –±–µ–∑–æ–ø–∞—Å–Ω–æ: get_all_bookings –¥–µ–ª–∞–µ—Ç joinedload(User)
        text += (
            f"üÜî ID: {b.id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name if user else '‚Äî'} (@{user.username if user else '‚Äî'})\n"
            f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver.name if driver else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            f"üìÖ –í—Ä–µ–º—è: {b.booking_time.strftime('%d.%m.%Y %H:%M')} - {b.end_time.strftime('%H:%M')}\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∏: {b.notes if b.notes else '–Ω–µ—Ç'}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {b.status}\n\n"
        )

    await message.answer(text[:4000])


@admin_router.message(Command("add_invite"))
async def add_invite_cmd(message: types.Message, state: FSMContext):
    if not _admin_only(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥:")
    await state.set_state(AdminStates.WAITING_NEW_INVITE)


@admin_router.message(AdminStates.WAITING_NEW_INVITE)
async def process_new_invite(message: types.Message, state: FSMContext):
    if not _admin_only(message.from_user.id):
        await state.clear()
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    code = message.text.strip()
    if db.add_invite(code):
        await message.answer(f"–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ '{code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    await state.clear()


@admin_router.message(Command("drivers"))
async def show_drivers(message: types.Message):
    if not _admin_only(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    drivers = db.get_all_drivers()
    if not drivers:
        return await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç")

    text = "–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n" + "\n".join(
        f"{d.id}. {d.name} ({d.phone})" for d in drivers
    )
    await message.answer(text)


@admin_router.message(Command("cancel_booking"))
async def cancel_booking_cmd(message: types.Message, state: FSMContext):
    if not _admin_only(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
    await state.set_state(AdminStates.WAITING_BOOKING_ID)


@admin_router.message(AdminStates.WAITING_BOOKING_ID)
async def process_booking_id(message: types.Message, state: FSMContext):
    if not _admin_only(message.from_user.id):
        await state.clear()
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    try:
        booking_id = int(message.text.strip())
        if db.cancel_booking(booking_id):
            await message.answer(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    await state.clear()

    @admin_router.message(Command("cleanup"))
    async def cleanup_bookings(message: types.Message):
        if not _admin_only(message.from_user.id):
            return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

        deleted_count = db.delete_canceled_bookings()
        await message.answer(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
