import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import dp, bot, ADMIN_ID, INVITE_CODE
from database import db
from keyboards import main_menu_kb, generate_dates_kb, generate_time_slots_kb, back_kb, get_calendar_kb
from admin import admin_router

logging.basicConfig(level=logging.INFO)

main_router = Router()


class BookingStates(StatesGroup):
    WAITING_INVITE = State()
    CHOOSING_DATE = State()
    CHOOSING_TIME = State()
    CHOOSING_END_TIME = State()
    ADDING_NOTES = State()
    CONFIRMATION = State()
    EDITING_BOOKING = State()


# –°—Ç–∞—Ä—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@main_router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user:
        await state.set_state(BookingStates.WAITING_INVITE)
        return await message.answer(
            "üîí –¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    await message.answer(
        "–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –º–æ—ë –≤—Ä–µ–º—è –¥–ª—è –í–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
@main_router.message(BookingStates.WAITING_INVITE)
async def process_invite_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    if db.check_invite(code):
        db.use_invite(code)
        db.add_user(
            tg_id=message.from_user.id,
            name=message.from_user.full_name,
            username=message.from_user.username
        )
        await message.answer(
            "‚úÖ –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@main_router.message(F.text == 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
async def show_calendar_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_calendar_kb())


@main_router.message(F.text == 'üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å')
async def show_calendar(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_dates_kb())


@main_router.message(F.text == 'üìù –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
async def show_user_bookings(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        return await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

    bookings = db.get_user_bookings(user.id)
    if not bookings:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", reply_markup=main_menu_kb())

    text = "üìù –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for booking in bookings:
        driver = db.get_driver(booking.driver_id)
        text += (
            f"üìÖ {booking.booking_time.strftime('%d.%m.%Y %H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver.name if driver else '–ö—Ç–æ-—Ç–æ –∏–∑ —Å–µ–º—å–∏'}\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∏: {booking.notes if booking.notes else '–Ω–µ—Ç'}\n"
            f"üÜî ID: {booking.id}\n\n"
        )

    await message.answer(text, reply_markup=main_menu_kb())


# –í—ã–±–æ—Ä –¥–∞—Ç—ã (–∫–Ω–æ–ø–∫–∏ ¬´–ü–Ω 12.08¬ª –∏ —Ç.–¥.)
@main_router.message(F.text.regexp(r'^[–ê-–Ø–∞-—è]{2} \d{2}\.\d{2}$'))
async def choose_date(message: types.Message, state: FSMContext):
    try:
        date_str = message.text.split()[1]
        date = datetime.strptime(date_str, "%d.%m").date()
        date = date.replace(year=datetime.now().year)
        if date < datetime.now().date():
            date = date.replace(year=datetime.now().year + 1)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")

    user = db.get_user(message.from_user.id)
    if not user:
        return await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start")

    drivers = db.get_all_drivers()
    if not drivers:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")

    driver_id = drivers[0].id
    await state.update_data(selected_date=date, driver_id=driver_id)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date.strftime('%d.%m.%Y')}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=generate_time_slots_kb(date, driver_id, user.id)
    )
    await state.set_state(BookingStates.CHOOSING_TIME)


# –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
@main_router.message(BookingStates.CHOOSING_TIME, F.text.regexp(r'^üü° \d{2}:\d{2}'))
async def choose_start_time(message: types.Message, state: FSMContext):
    time_str = message.text.split()[1]
    try:
        time_obj = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    data = await state.get_data()
    date = data["selected_date"]
    start_dt = datetime.combine(date, time_obj)

    if start_dt < datetime.now():
        return await message.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")

    await state.update_data(start_time=start_dt)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
        reply_markup=generate_time_slots_kb(date, data["driver_id"], message.from_user.id)
    )
    await state.set_state(BookingStates.CHOOSING_END_TIME)


# –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
@main_router.message(BookingStates.CHOOSING_END_TIME, F.text.regexp(r'^üü° \d{2}:\d{2}'))
async def choose_end_time(message: types.Message, state: FSMContext):
    time_str = message.text.split()[1]
    try:
        time_obj = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    data = await state.get_data()
    date = data["selected_date"]
    start_dt = data["start_time"]
    end_dt = datetime.combine(date, time_obj)

    if end_dt <= start_dt:
        return await message.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.update_data(end_time=end_dt)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è)\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'",
        reply_markup=back_kb()
    )
    await state.set_state(BookingStates.ADDING_NOTES)


# –ó–∞–º–µ—Ç–∫–∞
@main_router.message(BookingStates.ADDING_NOTES)
async def add_notes(message: types.Message, state: FSMContext):
    notes = message.text if message.text != '-' else None
    data = await state.get_data()

    confirm_text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        f"üìÖ –î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['start_time'].strftime('%H:%M')} - {data['end_time'].strftime('%H:%M')}\n"
        f"üìù –ó–∞–º–µ—Ç–∫–∏: {notes if notes else '–Ω–µ—Ç'}"
    )

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")]
    ])

    await state.update_data(notes=notes)
    await message.answer(confirm_text, reply_markup=confirm_kb)
    await state.set_state(BookingStates.CONFIRMATION)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@main_router.callback_query(BookingStates.CONFIRMATION, F.data == "confirm_booking")
async def confirm_booking(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    booking_id = db.add_booking(
        driver_id=data['driver_id'],
        user_id=user.id,
        booking_time=data['start_time'] - timedelta(minutes=30),
        end_time=data['end_time'] + timedelta(minutes=30),
        notes=data.get('notes')
    )

    if booking_id is None:
        # –°–ª–æ—Ç —É—Å–ø–µ–ª–∏ –∑–∞–Ω—è—Ç—å
        await callback.message.edit_text(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
        await state.clear()
        return

    if ADMIN_ID:
        try:
            driver = db.get_driver(data['driver_id'])
            await bot.send_message(
                ADMIN_ID,
                f"–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id}:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name} (@{user.username})\n"
                f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver.name if driver else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
                f"üìÖ –î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {data['start_time'].strftime('%H:%M')} - {data['end_time'].strftime('%H:%M')}\n"
                f"üìù –ó–∞–º–µ—Ç–∫–∏: {data.get('notes', '–Ω–µ—Ç')}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await callback.message.edit_text(
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
        f"–í–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –≤–∞—Å {data['selected_date'].strftime('%d.%m.%Y')} "
        f"—Å {data['start_time'].strftime('%H:%M')} –¥–æ {data['end_time'].strftime('%H:%M')}."
    )
    await state.clear()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


# –û—Ç–º–µ–Ω–∞
@main_router.callback_query(BookingStates.CONFIRMATION, F.data == "cancel_booking")
async def cancel_booking(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


# –ù–∞–∑–∞–¥
@main_router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_menu(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
# @main_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
# async def settings_stub(message: types.Message):
#     await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é.")


async def on_startup():
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not db.get_all_drivers():
        db.add_driver("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not db.check_invite(INVITE_CODE):
        db.add_invite(INVITE_CODE)

    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


async def on_shutdown():
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception:
            pass


if __name__ == "__main__":
    dp.include_router(admin_router)
    dp.include_router(main_router)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    asyncio.run(dp.start_polling(bot))
